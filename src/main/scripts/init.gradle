/*
 * Copyright (c) 2013 mgm technology partners GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.nio.ByteBuffer
import java.nio.CharBuffer
import java.nio.channels.FileChannel
import java.nio.channels.FileLock
import java.nio.channels.WritableByteChannel
import java.nio.charset.Charset
import java.nio.charset.CharsetEncoder
import java.text.SimpleDateFormat

apply plugin: InitPlugin

class InitPlugin implements Plugin<Gradle> {
	void apply(Gradle gradle) {
		gradle.useLogger(new LoggingListener())
	}
}

class LoggingListener implements StandardOutputListener {
	Project project

	void onOutput(CharSequence output) {
		writeWithLock(output)
	}

	private void writeWithLock(CharSequence output) {
		if (!System.properties['testResultsDir']) {
			// Only start writing log file when results dirctory is set
			return
		}

		File dir = new File(System.properties['testResultsDir'], 'supervisor')
		dir.mkdirs()
		FileOutputStream os = new FileOutputStream(new File(dir, 'supervisor.log'), true)
		FileChannel fileChannel = os.getChannel()

		FileLock fileLock = null
		try {
			fileLock = fileChannel.lock()
			long position = fileChannel.position()
			long size = fileChannel.size()
			if (size != position) {
				fileChannel.position(size)
			}
			writeLineToChannel(fileChannel, output)
		} finally {
			fileLock?.release()
		}
	}

	private void writeLineToChannel(final WritableByteChannel destChannel, final String line) throws IOException {
		String date = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(System.currentTimeMillis())
		String threadName = Thread.currentThread().getName()
		String tmpLine = line.endsWith(System.properties['line.separator']) ? line : line + System.properties['line.separator']
		CharBuffer buffer = CharBuffer.wrap("$date [$threadName] $tmpLine")
		CharsetEncoder encoder = Charset.forName('UTF-8').newEncoder()
		ByteBuffer bb = encoder.encode(buffer)
		writeToChannel(destChannel, bb)
	}

	private void writeToChannel(final WritableByteChannel destChannel, final ByteBuffer buffer) throws IOException {
		// write to the destination channel
		destChannel.write(buffer)

		// If partial transfer, shift remainder down so it does not get lost
		// If buffer is empty, this is the same as calling clear()
		buffer.compact()

		// EOF will leave buffer in fill state
		buffer.flip()

		// make sure the buffer is fully drained
		while (buffer.hasRemaining()) {
			destChannel.write(buffer)
		}
	}
}
