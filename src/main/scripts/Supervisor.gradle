/*
 * Copyright (c) 2014 mgm technology partners GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.DateFormat
import java.text.SimpleDateFormat

import org.apache.commons.io.FilenameUtils
import org.apache.commons.lang3.StringUtils
import org.apache.commons.lang3.time.StopWatch
import org.apache.tools.ant.taskdefs.condition.Os
import org.codehaus.plexus.util.cli.Commandline;

import com.mgmtp.perfload.supervisor.Commands
import com.mgmtp.perfload.supervisor.SupervisorTasks
import com.mgmtp.perfload.supervisor.SupervisorUtils

buildscript {
	dependencies {
		classpath fileTree(dir: 'lib')
	}
}

defaultTasks 'runLoadTest'

def config() {
	project.ext {
		if (!project.hasProperty('tenant')) {
			tenant = System.getenv('PERFLOAD_TENANT')
		}

		supervisorConfig = SupervisorUtils.loadConfig(tenant, 'SupervisorConfig.groovy')
		commands = SupervisorUtils.loadConfig(Commands.class)
		loadTestConfig = SupervisorUtils.loadTestConfig(tenant, 'LoadTestConfig.groovy')
		supervisorTasks = new SupervisorTasks(ant: ant, loadTestConfig: loadTestConfig, commands: commands)

		resultsDir = "$projectDir/results"
		consoleDir = "$projectDir/../console"
		perfAlyzerDir = "$projectDir/../perfalyzer"

		if (!supervisorConfig.requireTestComment) {
			testComment = ''
		}
	}
	if (supervisorConfig.runProjectSpecificTasks) {
		// includes project-specific targets as if they were directly defined in this file
		String projectTasksFile = "conf/${tenant ? tenant + '/' : ''}ProjectTasks.gradle"
		println "Including project targets file: $projectTasksFile"

		apply from: projectTasksFile
	}
}

def welcome() {
	int len = 65
	String copyright = StringUtils.center('(c) 2013, mgm technology partners GmbH', len)
	String welcomeMsg = StringUtils.center('Welcome to perfLoad\'s Supervisor ${project.version}', len)

	List list1 = []
	(len + 2).times { list1 << '*' }
	String msg1 = list1.join()

	List list2 = ['*']
	len.times { list2 << ' ' }
	list2 << '*'
	String msg2 = list2.join()

	String message = """
	$msg1
	$msg2
	$msg2
	*${welcomeMsg}*
	*${copyright}*
	$msg2
	$msg2
	$msg1
	"""

	println message

	if (tenant) {
		println "Running in multi-tenancy mode. Tenant: $tenant."
	} else {
		println 'No tenant specified. Running in single-tenancy mode.'
	}
}

task init(description: 'Initializes the Supervisor loading basic configuration for testplan-independent tasks') {
	config()
	welcome()
}

task loadTestplan(description: 'Loads the test plan possibly prompting for the testplan to be used.') << {
	// if not set via command-line (-Dtestplan=<...>), the user is prompted for the test config to be used
	if (!project.hasProperty('testplan')) {
		project.ext.testplan = promptForTestplan()
	}

	// Use the testplan file's base name as the test name and add it to the script's binding.
	// Thus, it is also accessible by an included 'ProjectTargets.gant' file.k
	project.ext.testname = FilenameUtils.getBaseName(testplan)

	// prefix the results directory with a timestamp
	DateFormat df = new SimpleDateFormat('yyyyMMdd-HHmm')

	def testResultsDir = new File(resultsDir, "${tenant ? tenant + '/' : ''}${df.format(new Date())}_${FilenameUtils.getBaseName(testplan)}")

	project.ext.testResultsDir = testResultsDir
	// sys prop necessary for logging to file, used in init.gradle
	System.setProperty('testResultsDir', testResultsDir.path)

	testResultsDir.mkdirs()
	supervisorTasks.resultsDir = testResultsDir
}

task runLoadTest(dependsOn: loadTestplan, description: 'Runs a load test.') << {
	// if not set via command-line (-DtestComment=<...>), the user is prompted for the test config to be used
	if (!project.hasProperty('testComment')) {
		def console = System.console()
		project.ext.testComment = console.readLine('\nPlease enter some comment for the test:')
	}

	def tasks = []

	if (supervisorConfig.cleanupBeforeTest) {
		tasks << cleanupFiles
	}

	if (supervisorConfig.runProjectSpecificTasks) {
		tasks << before
	}

	tasks << startPerfmons
	tasks << restartDaemons

	if (supervisorConfig.executeStartupCommands) {
		tasks << executeStartupCommands
	}

	if (supervisorConfig.runProjectSpecificTasks) {
		tasks << performSystemCheck
	}

	tasks << startTest

	if (supervisorConfig.executeShutdownCommands) {
		tasks << executeShutdownCommands
	}

	tasks << stopDaemons
	tasks << stopPerfmons

	if (supervisorConfig.runProjectSpecificTasks) {
		tasks << after
	}

	task writeTestComment << {
		new File(consoleDir, 'perfload.meta.utf8.props').withWriterAppend('UTF-8') { writer ->
			new PrintWriter(writer).println("test.comment=${testComment}")
		}
	}
	tasks << writeTestComment

	if (supervisorConfig.collectResults) {
		tasks << zipFiles
		tasks << downloadFiles
	}

	if (supervisorConfig.createReport) {
		tasks <<  runPerfAlyzer
	}

	StopWatch stopWatch = new StopWatch()
	stopWatch.start()

	tasks.each { it.execute() }

	stopWatch.stop()

	println()
	println 'LOAD TEST EXECUTION FINISHED'
	println()
	println "Total execution time: $stopWatch"
}

task startTest(dependsOn: loadTestplan, description: 'Starts a load test') << {
	List daemons = SupervisorUtils.readDaemonsFromConfig(loadTestConfig)
	SupervisorUtils.executeCommandLine("./console", consoleDir,
			[
				'-testplan',
				testplan,
				'-daemons',
				daemons.join(','),
				'-timeout',
				"${supervisorConfig.loadProfileTestTimeout}"
			].flatten())
}

task abortLoadTest(dependsOn: loadTestplan, description: 'Aborts a load test') << {
	List daemons = SupervisorUtils.readDaemonsFromConfig(loadTestConfig)
	SupervisorUtils.executeCommandLine("./console", consoleDir,
			[
				'-testplan',
				testplan,
				'-daemons',
				daemons.join(','),
				'-abort'
			].flatten())
}

task runPerfAlyzer(dependsOn: loadTestplan, description: 'Run perfAlyzer to create the report') << {
	String absoluteResultsDir = testResultsDir.getAbsolutePath()

	SupervisorUtils.executeCommandLine("./perfalyzer", perfAlyzerDir,
			[
				'-i',
				absoluteResultsDir,
				'-o',
				"output${tenant ? '/'+ tenant : ''}"
			])
}

task startDaemons(description: 'Starts daemons') << { supervisorTasks.startDaemons() }

task stopDaemons(description: 'Stops daemons') << { supervisorTasks.stopDaemons() }

task restartDaemons(description: 'Restart daemons') << {
	supervisorTasks.stopDaemons()
	sleep 5000L
	supervisorTasks.startDaemons()
}

task startPerfmons(description: 'Starts perfmons') << { supervisorTasks.startPerfmons() }

task stopPerfmons(description: 'Stops perfmons') << { supervisorTasks.stopPerfmons() }

task cleanupFiles(description : 'Perform all clean-up tasks.') << {
	cleanupConsoleFiles()
	supervisorTasks.cleanupDaemonFiles()
	supervisorTasks.cleanupClientFiles()
	supervisorTasks.cleanupPerfmonFiles()
	supervisorTasks.cleanupConfiguredFiles()
}

task executeStartupCommands(description: 'Executes configured startup commands') << { supervisorTasks.execStartupCommands() }

task executeShutdownCommands(description: 'Executes configured shutdown commands') << { supervisorTasks.execShutdownCommands() }

task zipFiles(dependsOn: loadTestplan, description: 'Zips all result files via SSH') << {
	zipConsoleFiles()
	supervisorTasks.zipDaemonLogs()
	supervisorTasks.zipClientLogs()
	supervisorTasks.zipPerfmonLogs()
	supervisorTasks.zipConfiguredFiles()
}

task downloadFiles(dependsOn: loadTestplan, description: 'Downloads all result files via SCP.') << {
	supervisorTasks.downloadDaemonLogs()
	supervisorTasks.downloadClientLogs()
	supervisorTasks.downloadPerfmonLogs()
	supervisorTasks.downloadConfiguredFiles()
}

/**
 * Prompts the user to select a testplan and returns the selected one.
 */
def String promptForTestplan() {
	int i = 1
	Map<Integer, String> testplans = [:]
	new File(consoleDir, "testplans/${tenant ? tenant : ''}").eachFileMatch(~/(?!testjars).*\.xml/, { testplans[i++] = it.name })

	String lineSep = System.properties.'line.separator'
	String prompt = "${lineSep}Please select the testplan you'd like to use:$lineSep"
	prompt += testplans.collect{ key, value -> "${StringUtils.leftPad(String.valueOf(key), 3)}) $value" }.join(lineSep) + lineSep

	// display all configured testplans prefixed by running numbers,
	// which the user needs to enter in order to select the desired testplan
	while (true) {
		def testplanIndex = System.console().readLine(prompt)
		try {
			int index = Integer.parseInt(testplanIndex)
			if (index <= 0 || index > testplans.size()) {
				continue
			}
		} catch (NumberFormatException ex) {
			continue
		}

		def selectedTestplan = testplans[testplanIndex as int]

		println()
		println "Selected testplan: '$selectedTestplan'..."
		println()

		return "${tenant ? tenant + '/' : ''}$selectedTestplan"
	}
}

def zipConsoleFiles() {
	File testplanFile = new File("${consoleDir}/testplans/${testplan}")
	def config = new XmlSlurper().parse(testplanFile)
	String eventsFile = config.loadProfile

	task(zipConsoleFiles, type: Zip) {
		from(consoleDir) {
			include '*.log'
			include 'ltStatus.txt'
			include 'ltThreads.txt'
			include 'perfload.meta.utf8.props'
		}
		from(testplanFile.parent) { include testplanFile.name }
		from("${testplanFile.parent}/loadprofiles") { include eventsFile }
		archiveName = "console-logs.zip"
		destinationDir = file("${testResultsDir}/console")
	}.execute()
}

def cleanupConsoleFiles() {
	ant.delete {
		fileset(dir: "${consoleDir}") {
			include(name: '*.log')
			include(name: 'ltStatus.txt')
			include(name: 'ltThreads.txt')
			include(name: 'perfload.meta.utf8.props')
		}
	}
}
